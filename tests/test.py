from functools import wraps
from asyncio import run, timeout
from prymes import *
from time import perf_counter

class test:
    n = 0
    tests = []

    def __init__(self, times=1, timeout=1):
        test.n += 1
        self._id, self.times, self.timeout = test.n, times, timeout

    def __call__(self, f):
        @wraps(f)
        async def wrapper():
            print(end=f'Test #{self._id}: {f.__name__}... ')
            try:
                st = perf_counter()
                for _ in range(self.times):
                    async with timeout(self.timeout):
                        await f()
                print(f'Passed in {perf_counter() - st:.3f}s')
                return 0
            except TimeoutError:
                print('Failed: Timed Out')
                return 1
            except Exception as e:
                print(f'Failed: {e}')
                return 1
        test.tests.append(wrapper)
        return wrapper
    
    @classmethod
    async def execute_all(cls):
        s = cls.n
        for t in cls.tests:
            s -= await t()
        print(f'Passed {s}/{cls.n}')

@test()
async def primality_test():
    assert 480_194_653 in P
    assert 20_074_069 not in P
    assert 8_718_775_377_449 in P
    assert 8_651_776_913_431 not in P
    assert 3_315_293_452_192_821_991 in P
    assert 1_152_965_996_591_997_761 not in P
    assert 10_000_003_599_249_373_469 not in P
    assert 203956878356401977405765866929034577280193993314348263094772646453283062722701277632936616063144088173312372882677123879538709400158306567338328279154499698366071906766440037074217117805690872792848149112022286332144876183376326512083574821647933992961249917319836219304274280243803104015000563790123 in P
    assert 5195908475657893494027183240048398571429282126204032027777137836043662020707595556264018525880784406918290641249515082189298559149176184502808489120072844992687392807287776735971418347270261896375014971824691165077613379859095700097330459748808428401797429100642458691817195118746121515172654632282216869987549182422433637259085141865462043576798423387184774447920739934236584823824281198163815010674810451660377306056201619676256133844143603833904414952634432190114657544454178424020924616515723350778707749817125772467962926386356373289912154831438167899885040445364023527381951378636564391212010397122822120720357 not in P
    assert 22701801293785014193580405120204586741061235962766583907094021879215171483119139894870133091111044901683400949483846818299518041763507948922590774925466088171879259465921026597046700449819899096862039460017743094473811056991294128542891880855362707407670722593737772666973440977361243336397308051763091506836310795312607239520365290032105848839507981452307299417185715796297454995023505316040919859193718023307414880446217922800831766040938656344571034778553457121080530736394535923932651866030515041060966437313323672831539323500067937107541955437362433248361242525945868802353916766181532375855504886901432221349733 not in P

run(test.execute_all())